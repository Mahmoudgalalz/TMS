services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: service-tickets-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: service_tickets
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d service_tickets"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - service-tickets-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: service-tickets-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispassword", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - service-tickets-network

  # API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: service-tickets-api
    restart: unless-stopped
    env_file:
      - .env.docker
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api/uploads:/app/uploads
      - ./apps/api/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - service-tickets-network

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: service-tickets-web
    restart: unless-stopped
    env_file:
      - .env.docker
    ports:
      - "5173:80"
    depends_on:
      - api
    networks:
      - service-tickets-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  service-tickets-network:
    driver: bridge
    name: service-tickets-network
