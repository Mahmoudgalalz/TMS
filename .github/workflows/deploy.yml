name: Deploy to AWS

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_API_REPOSITORY: 891819783983.dkr.ecr.us-east-1.amazonaws.com/service-ticket-system-dev-api
  ECR_WEB_REPOSITORY: 891819783983.dkr.ecr.us-east-1.amazonaws.com/service-ticket-system-dev-web
  ECS_CLUSTER: service-ticket-system-dev-cluster
  ECS_API_SERVICE: service-ticket-system-dev-api
  ECS_FRONTEND_SERVICE: service-ticket-system-dev-frontend

jobs:
  # build-and-deploy-api:
  #   name: Build and Deploy API
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v2

  #   - name: Build and push API Docker image
  #     run: |
  #       docker build --platform linux/amd64 -t $ECR_API_REPOSITORY:latest -f apps/api/Dockerfile .
  #       docker push $ECR_API_REPOSITORY:latest

  #   - name: Scale up and update ECS API service
  #     run: |
  #       # Scale up to 1 task if currently at 0
  #       CURRENT_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_API_SERVICE --query 'services[0].desiredCount' --output text)
  #       if [ "$CURRENT_COUNT" = "0" ]; then
  #         aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_API_SERVICE --desired-count 1
  #       fi
  #       # Force new deployment with latest image
  #       aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_API_SERVICE --force-new-deployment

  build-and-deploy-frontend:
    name: Build and Deploy Frontend to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push frontend Docker image
      run: |
        docker build --platform linux/amd64 -t $ECR_WEB_REPOSITORY:latest -f apps/web/Dockerfile .
        docker push $ECR_WEB_REPOSITORY:latest

    - name: Scale up and update ECS frontend service
      run: |
        # Scale up to 1 task if currently at 0
        CURRENT_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_FRONTEND_SERVICE --query 'services[0].desiredCount' --output text)
        if [ "$CURRENT_COUNT" = "0" ]; then
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --desired-count 1
        fi
        # Force new deployment with latest image
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment

    - name: Wait for deployment and get service IPs
      run: |
        echo "Waiting for services to stabilize..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_API_SERVICE $ECS_FRONTEND_SERVICE
        
        echo "Getting service public IPs..."
        API_TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_API_SERVICE --query 'taskArns[0]' --output text)
        FRONTEND_TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_FRONTEND_SERVICE --query 'taskArns[0]' --output text)
        
        if [ "$API_TASK_ARN" != "None" ] && [ "$API_TASK_ARN" != "" ]; then
          API_ENI=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $API_TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          API_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $API_ENI --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "API Service Public IP: $API_IP"
          echo "API URL: http://$API_IP:3001/api/v1"
        fi
        
        if [ "$FRONTEND_TASK_ARN" != "None" ] && [ "$FRONTEND_TASK_ARN" != "" ]; then
          FRONTEND_ENI=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $FRONTEND_TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          FRONTEND_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $FRONTEND_ENI --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "Frontend Service Public IP: $FRONTEND_IP"
          echo "Frontend URL: http://$FRONTEND_IP"
        fi

